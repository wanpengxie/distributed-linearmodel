// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_config_2eproto__INCLUDED
#define PROTOBUF_config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protos {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_config_2eproto();
void protobuf_AssignDesc_config_2eproto();
void protobuf_ShutdownFile_config_2eproto();

class AllConfig;
class FtrlConfig;
class SlotConfig;

enum VectorType {
  BIAS = 0,
  LEFT = 1,
  RIGHT = 2,
  VLEFT = 3,
  VRIGHT = 4,
  VectorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VectorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VectorType_IsValid(int value);
const VectorType VectorType_MIN = BIAS;
const VectorType VectorType_MAX = VRIGHT;
const int VectorType_ARRAYSIZE = VectorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VectorType_descriptor();
inline const ::std::string& VectorType_Name(VectorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VectorType_descriptor(), value);
}
inline bool VectorType_Parse(
    const ::std::string& name, VectorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VectorType>(
    VectorType_descriptor(), name, value);
}
// ===================================================================

class FtrlConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.FtrlConfig) */ {
 public:
  FtrlConfig();
  virtual ~FtrlConfig();

  FtrlConfig(const FtrlConfig& from);

  inline FtrlConfig& operator=(const FtrlConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FtrlConfig& default_instance();

  void Swap(FtrlConfig* other);

  // implements Message ----------------------------------------------

  inline FtrlConfig* New() const { return New(NULL); }

  FtrlConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FtrlConfig& from);
  void MergeFrom(const FtrlConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FtrlConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float l1 = 1;
  void clear_l1();
  static const int kL1FieldNumber = 1;
  float l1() const;
  void set_l1(float value);

  // optional float l2 = 2;
  void clear_l2();
  static const int kL2FieldNumber = 2;
  float l2() const;
  void set_l2(float value);

  // optional float alpha = 3;
  void clear_alpha();
  static const int kAlphaFieldNumber = 3;
  float alpha() const;
  void set_alpha(float value);

  // optional float beta = 4;
  void clear_beta();
  static const int kBetaFieldNumber = 4;
  float beta() const;
  void set_beta(float value);

  // optional float fm_alpha = 5;
  void clear_fm_alpha();
  static const int kFmAlphaFieldNumber = 5;
  float fm_alpha() const;
  void set_fm_alpha(float value);

  // optional float fm_beta = 6;
  void clear_fm_beta();
  static const int kFmBetaFieldNumber = 6;
  float fm_beta() const;
  void set_fm_beta(float value);

  // optional float fm_l1 = 7;
  void clear_fm_l1();
  static const int kFmL1FieldNumber = 7;
  float fm_l1() const;
  void set_fm_l1(float value);

  // optional float fm_l2 = 8;
  void clear_fm_l2();
  static const int kFmL2FieldNumber = 8;
  float fm_l2() const;
  void set_fm_l2(float value);

  // @@protoc_insertion_point(class_scope:protos.FtrlConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float l1_;
  float l2_;
  float alpha_;
  float beta_;
  float fm_alpha_;
  float fm_beta_;
  float fm_l1_;
  float fm_l2_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static FtrlConfig* default_instance_;
};
// -------------------------------------------------------------------

class SlotConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.SlotConfig) */ {
 public:
  SlotConfig();
  virtual ~SlotConfig();

  SlotConfig(const SlotConfig& from);

  inline SlotConfig& operator=(const SlotConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlotConfig& default_instance();

  void Swap(SlotConfig* other);

  // implements Message ----------------------------------------------

  inline SlotConfig* New() const { return New(NULL); }

  SlotConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlotConfig& from);
  void MergeFrom(const SlotConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SlotConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 slot_id = 1;
  void clear_slot_id();
  static const int kSlotIdFieldNumber = 1;
  ::google::protobuf::uint64 slot_id() const;
  void set_slot_id(::google::protobuf::uint64 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .protos.FtrlConfig slot_config = 3;
  bool has_slot_config() const;
  void clear_slot_config();
  static const int kSlotConfigFieldNumber = 3;
  const ::protos::FtrlConfig& slot_config() const;
  ::protos::FtrlConfig* mutable_slot_config();
  ::protos::FtrlConfig* release_slot_config();
  void set_allocated_slot_config(::protos::FtrlConfig* slot_config);

  // optional .protos.VectorType vec_type = 4;
  void clear_vec_type();
  static const int kVecTypeFieldNumber = 4;
  ::protos::VectorType vec_type() const;
  void set_vec_type(::protos::VectorType value);

  // optional uint32 filter_count = 5;
  void clear_filter_count();
  static const int kFilterCountFieldNumber = 5;
  ::google::protobuf::uint32 filter_count() const;
  void set_filter_count(::google::protobuf::uint32 value);

  // optional int32 cross = 6;
  void clear_cross();
  static const int kCrossFieldNumber = 6;
  ::google::protobuf::int32 cross() const;
  void set_cross(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.SlotConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 slot_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::protos::FtrlConfig* slot_config_;
  int vec_type_;
  ::google::protobuf::uint32 filter_count_;
  ::google::protobuf::int32 cross_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static SlotConfig* default_instance_;
};
// -------------------------------------------------------------------

class AllConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.AllConfig) */ {
 public:
  AllConfig();
  virtual ~AllConfig();

  AllConfig(const AllConfig& from);

  inline AllConfig& operator=(const AllConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllConfig& default_instance();

  void Swap(AllConfig* other);

  // implements Message ----------------------------------------------

  inline AllConfig* New() const { return New(NULL); }

  AllConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllConfig& from);
  void MergeFrom(const AllConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 embedding_dim = 1;
  void clear_embedding_dim();
  static const int kEmbeddingDimFieldNumber = 1;
  ::google::protobuf::uint32 embedding_dim() const;
  void set_embedding_dim(::google::protobuf::uint32 value);

  // optional .protos.FtrlConfig ftrl_config = 2;
  bool has_ftrl_config() const;
  void clear_ftrl_config();
  static const int kFtrlConfigFieldNumber = 2;
  const ::protos::FtrlConfig& ftrl_config() const;
  ::protos::FtrlConfig* mutable_ftrl_config();
  ::protos::FtrlConfig* release_ftrl_config();
  void set_allocated_ftrl_config(::protos::FtrlConfig* ftrl_config);

  // repeated .protos.SlotConfig slot_whitelist = 3;
  int slot_whitelist_size() const;
  void clear_slot_whitelist();
  static const int kSlotWhitelistFieldNumber = 3;
  const ::protos::SlotConfig& slot_whitelist(int index) const;
  ::protos::SlotConfig* mutable_slot_whitelist(int index);
  ::protos::SlotConfig* add_slot_whitelist();
  ::google::protobuf::RepeatedPtrField< ::protos::SlotConfig >*
      mutable_slot_whitelist();
  const ::google::protobuf::RepeatedPtrField< ::protos::SlotConfig >&
      slot_whitelist() const;

  // optional bool need_output_model = 4;
  void clear_need_output_model();
  static const int kNeedOutputModelFieldNumber = 4;
  bool need_output_model() const;
  void set_need_output_model(bool value);

  // optional string save_model_path = 5;
  void clear_save_model_path();
  static const int kSaveModelPathFieldNumber = 5;
  const ::std::string& save_model_path() const;
  void set_save_model_path(const ::std::string& value);
  void set_save_model_path(const char* value);
  void set_save_model_path(const char* value, size_t size);
  ::std::string* mutable_save_model_path();
  ::std::string* release_save_model_path();
  void set_allocated_save_model_path(::std::string* save_model_path);

  // optional string save_inc_model_path = 6;
  void clear_save_inc_model_path();
  static const int kSaveIncModelPathFieldNumber = 6;
  const ::std::string& save_inc_model_path() const;
  void set_save_inc_model_path(const ::std::string& value);
  void set_save_inc_model_path(const char* value);
  void set_save_inc_model_path(const char* value, size_t size);
  ::std::string* mutable_save_inc_model_path();
  ::std::string* release_save_inc_model_path();
  void set_allocated_save_inc_model_path(::std::string* save_inc_model_path);

  // optional string load_model_path = 7;
  void clear_load_model_path();
  static const int kLoadModelPathFieldNumber = 7;
  const ::std::string& load_model_path() const;
  void set_load_model_path(const ::std::string& value);
  void set_load_model_path(const char* value);
  void set_load_model_path(const char* value, size_t size);
  ::std::string* mutable_load_model_path();
  ::std::string* release_load_model_path();
  void set_allocated_load_model_path(::std::string* load_model_path);

  // optional string load_inc_model_path = 8;
  void clear_load_inc_model_path();
  static const int kLoadIncModelPathFieldNumber = 8;
  const ::std::string& load_inc_model_path() const;
  void set_load_inc_model_path(const ::std::string& value);
  void set_load_inc_model_path(const char* value);
  void set_load_inc_model_path(const char* value, size_t size);
  ::std::string* mutable_load_inc_model_path();
  ::std::string* release_load_inc_model_path();
  void set_allocated_load_inc_model_path(::std::string* load_inc_model_path);

  // repeated string train_path_list = 9;
  int train_path_list_size() const;
  void clear_train_path_list();
  static const int kTrainPathListFieldNumber = 9;
  const ::std::string& train_path_list(int index) const;
  ::std::string* mutable_train_path_list(int index);
  void set_train_path_list(int index, const ::std::string& value);
  void set_train_path_list(int index, const char* value);
  void set_train_path_list(int index, const char* value, size_t size);
  ::std::string* add_train_path_list();
  void add_train_path_list(const ::std::string& value);
  void add_train_path_list(const char* value);
  void add_train_path_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& train_path_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_train_path_list();

  // repeated string test_path_list = 10;
  int test_path_list_size() const;
  void clear_test_path_list();
  static const int kTestPathListFieldNumber = 10;
  const ::std::string& test_path_list(int index) const;
  ::std::string* mutable_test_path_list(int index);
  void set_test_path_list(int index, const ::std::string& value);
  void set_test_path_list(int index, const char* value);
  void set_test_path_list(int index, const char* value, size_t size);
  ::std::string* add_test_path_list();
  void add_test_path_list(const ::std::string& value);
  void add_test_path_list(const char* value);
  void add_test_path_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_path_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_path_list();

  // optional uint32 filter_count = 11;
  void clear_filter_count();
  static const int kFilterCountFieldNumber = 11;
  ::google::protobuf::uint32 filter_count() const;
  void set_filter_count(::google::protobuf::uint32 value);

  // optional uint32 delay_step = 12;
  void clear_delay_step();
  static const int kDelayStepFieldNumber = 12;
  ::google::protobuf::uint32 delay_step() const;
  void set_delay_step(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protos.AllConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::protos::FtrlConfig* ftrl_config_;
  ::google::protobuf::uint32 embedding_dim_;
  bool need_output_model_;
  ::google::protobuf::RepeatedPtrField< ::protos::SlotConfig > slot_whitelist_;
  ::google::protobuf::internal::ArenaStringPtr save_model_path_;
  ::google::protobuf::internal::ArenaStringPtr save_inc_model_path_;
  ::google::protobuf::internal::ArenaStringPtr load_model_path_;
  ::google::protobuf::internal::ArenaStringPtr load_inc_model_path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> train_path_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_path_list_;
  ::google::protobuf::uint32 filter_count_;
  ::google::protobuf::uint32 delay_step_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static AllConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FtrlConfig

// optional float l1 = 1;
inline void FtrlConfig::clear_l1() {
  l1_ = 0;
}
inline float FtrlConfig::l1() const {
  // @@protoc_insertion_point(field_get:protos.FtrlConfig.l1)
  return l1_;
}
inline void FtrlConfig::set_l1(float value) {
  
  l1_ = value;
  // @@protoc_insertion_point(field_set:protos.FtrlConfig.l1)
}

// optional float l2 = 2;
inline void FtrlConfig::clear_l2() {
  l2_ = 0;
}
inline float FtrlConfig::l2() const {
  // @@protoc_insertion_point(field_get:protos.FtrlConfig.l2)
  return l2_;
}
inline void FtrlConfig::set_l2(float value) {
  
  l2_ = value;
  // @@protoc_insertion_point(field_set:protos.FtrlConfig.l2)
}

// optional float alpha = 3;
inline void FtrlConfig::clear_alpha() {
  alpha_ = 0;
}
inline float FtrlConfig::alpha() const {
  // @@protoc_insertion_point(field_get:protos.FtrlConfig.alpha)
  return alpha_;
}
inline void FtrlConfig::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:protos.FtrlConfig.alpha)
}

// optional float beta = 4;
inline void FtrlConfig::clear_beta() {
  beta_ = 0;
}
inline float FtrlConfig::beta() const {
  // @@protoc_insertion_point(field_get:protos.FtrlConfig.beta)
  return beta_;
}
inline void FtrlConfig::set_beta(float value) {
  
  beta_ = value;
  // @@protoc_insertion_point(field_set:protos.FtrlConfig.beta)
}

// optional float fm_alpha = 5;
inline void FtrlConfig::clear_fm_alpha() {
  fm_alpha_ = 0;
}
inline float FtrlConfig::fm_alpha() const {
  // @@protoc_insertion_point(field_get:protos.FtrlConfig.fm_alpha)
  return fm_alpha_;
}
inline void FtrlConfig::set_fm_alpha(float value) {
  
  fm_alpha_ = value;
  // @@protoc_insertion_point(field_set:protos.FtrlConfig.fm_alpha)
}

// optional float fm_beta = 6;
inline void FtrlConfig::clear_fm_beta() {
  fm_beta_ = 0;
}
inline float FtrlConfig::fm_beta() const {
  // @@protoc_insertion_point(field_get:protos.FtrlConfig.fm_beta)
  return fm_beta_;
}
inline void FtrlConfig::set_fm_beta(float value) {
  
  fm_beta_ = value;
  // @@protoc_insertion_point(field_set:protos.FtrlConfig.fm_beta)
}

// optional float fm_l1 = 7;
inline void FtrlConfig::clear_fm_l1() {
  fm_l1_ = 0;
}
inline float FtrlConfig::fm_l1() const {
  // @@protoc_insertion_point(field_get:protos.FtrlConfig.fm_l1)
  return fm_l1_;
}
inline void FtrlConfig::set_fm_l1(float value) {
  
  fm_l1_ = value;
  // @@protoc_insertion_point(field_set:protos.FtrlConfig.fm_l1)
}

// optional float fm_l2 = 8;
inline void FtrlConfig::clear_fm_l2() {
  fm_l2_ = 0;
}
inline float FtrlConfig::fm_l2() const {
  // @@protoc_insertion_point(field_get:protos.FtrlConfig.fm_l2)
  return fm_l2_;
}
inline void FtrlConfig::set_fm_l2(float value) {
  
  fm_l2_ = value;
  // @@protoc_insertion_point(field_set:protos.FtrlConfig.fm_l2)
}

// -------------------------------------------------------------------

// SlotConfig

// optional uint64 slot_id = 1;
inline void SlotConfig::clear_slot_id() {
  slot_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SlotConfig::slot_id() const {
  // @@protoc_insertion_point(field_get:protos.SlotConfig.slot_id)
  return slot_id_;
}
inline void SlotConfig::set_slot_id(::google::protobuf::uint64 value) {
  
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:protos.SlotConfig.slot_id)
}

// optional string name = 2;
inline void SlotConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SlotConfig::name() const {
  // @@protoc_insertion_point(field_get:protos.SlotConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SlotConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.SlotConfig.name)
}
inline void SlotConfig::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.SlotConfig.name)
}
inline void SlotConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.SlotConfig.name)
}
inline ::std::string* SlotConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protos.SlotConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SlotConfig::release_name() {
  // @@protoc_insertion_point(field_release:protos.SlotConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SlotConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protos.SlotConfig.name)
}

// optional .protos.FtrlConfig slot_config = 3;
inline bool SlotConfig::has_slot_config() const {
  return !_is_default_instance_ && slot_config_ != NULL;
}
inline void SlotConfig::clear_slot_config() {
  if (GetArenaNoVirtual() == NULL && slot_config_ != NULL) delete slot_config_;
  slot_config_ = NULL;
}
inline const ::protos::FtrlConfig& SlotConfig::slot_config() const {
  // @@protoc_insertion_point(field_get:protos.SlotConfig.slot_config)
  return slot_config_ != NULL ? *slot_config_ : *default_instance_->slot_config_;
}
inline ::protos::FtrlConfig* SlotConfig::mutable_slot_config() {
  
  if (slot_config_ == NULL) {
    slot_config_ = new ::protos::FtrlConfig;
  }
  // @@protoc_insertion_point(field_mutable:protos.SlotConfig.slot_config)
  return slot_config_;
}
inline ::protos::FtrlConfig* SlotConfig::release_slot_config() {
  // @@protoc_insertion_point(field_release:protos.SlotConfig.slot_config)
  
  ::protos::FtrlConfig* temp = slot_config_;
  slot_config_ = NULL;
  return temp;
}
inline void SlotConfig::set_allocated_slot_config(::protos::FtrlConfig* slot_config) {
  delete slot_config_;
  slot_config_ = slot_config;
  if (slot_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protos.SlotConfig.slot_config)
}

// optional .protos.VectorType vec_type = 4;
inline void SlotConfig::clear_vec_type() {
  vec_type_ = 0;
}
inline ::protos::VectorType SlotConfig::vec_type() const {
  // @@protoc_insertion_point(field_get:protos.SlotConfig.vec_type)
  return static_cast< ::protos::VectorType >(vec_type_);
}
inline void SlotConfig::set_vec_type(::protos::VectorType value) {
  
  vec_type_ = value;
  // @@protoc_insertion_point(field_set:protos.SlotConfig.vec_type)
}

// optional uint32 filter_count = 5;
inline void SlotConfig::clear_filter_count() {
  filter_count_ = 0u;
}
inline ::google::protobuf::uint32 SlotConfig::filter_count() const {
  // @@protoc_insertion_point(field_get:protos.SlotConfig.filter_count)
  return filter_count_;
}
inline void SlotConfig::set_filter_count(::google::protobuf::uint32 value) {
  
  filter_count_ = value;
  // @@protoc_insertion_point(field_set:protos.SlotConfig.filter_count)
}

// optional int32 cross = 6;
inline void SlotConfig::clear_cross() {
  cross_ = 0;
}
inline ::google::protobuf::int32 SlotConfig::cross() const {
  // @@protoc_insertion_point(field_get:protos.SlotConfig.cross)
  return cross_;
}
inline void SlotConfig::set_cross(::google::protobuf::int32 value) {
  
  cross_ = value;
  // @@protoc_insertion_point(field_set:protos.SlotConfig.cross)
}

// -------------------------------------------------------------------

// AllConfig

// optional uint32 embedding_dim = 1;
inline void AllConfig::clear_embedding_dim() {
  embedding_dim_ = 0u;
}
inline ::google::protobuf::uint32 AllConfig::embedding_dim() const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.embedding_dim)
  return embedding_dim_;
}
inline void AllConfig::set_embedding_dim(::google::protobuf::uint32 value) {
  
  embedding_dim_ = value;
  // @@protoc_insertion_point(field_set:protos.AllConfig.embedding_dim)
}

// optional .protos.FtrlConfig ftrl_config = 2;
inline bool AllConfig::has_ftrl_config() const {
  return !_is_default_instance_ && ftrl_config_ != NULL;
}
inline void AllConfig::clear_ftrl_config() {
  if (GetArenaNoVirtual() == NULL && ftrl_config_ != NULL) delete ftrl_config_;
  ftrl_config_ = NULL;
}
inline const ::protos::FtrlConfig& AllConfig::ftrl_config() const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.ftrl_config)
  return ftrl_config_ != NULL ? *ftrl_config_ : *default_instance_->ftrl_config_;
}
inline ::protos::FtrlConfig* AllConfig::mutable_ftrl_config() {
  
  if (ftrl_config_ == NULL) {
    ftrl_config_ = new ::protos::FtrlConfig;
  }
  // @@protoc_insertion_point(field_mutable:protos.AllConfig.ftrl_config)
  return ftrl_config_;
}
inline ::protos::FtrlConfig* AllConfig::release_ftrl_config() {
  // @@protoc_insertion_point(field_release:protos.AllConfig.ftrl_config)
  
  ::protos::FtrlConfig* temp = ftrl_config_;
  ftrl_config_ = NULL;
  return temp;
}
inline void AllConfig::set_allocated_ftrl_config(::protos::FtrlConfig* ftrl_config) {
  delete ftrl_config_;
  ftrl_config_ = ftrl_config;
  if (ftrl_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protos.AllConfig.ftrl_config)
}

// repeated .protos.SlotConfig slot_whitelist = 3;
inline int AllConfig::slot_whitelist_size() const {
  return slot_whitelist_.size();
}
inline void AllConfig::clear_slot_whitelist() {
  slot_whitelist_.Clear();
}
inline const ::protos::SlotConfig& AllConfig::slot_whitelist(int index) const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.slot_whitelist)
  return slot_whitelist_.Get(index);
}
inline ::protos::SlotConfig* AllConfig::mutable_slot_whitelist(int index) {
  // @@protoc_insertion_point(field_mutable:protos.AllConfig.slot_whitelist)
  return slot_whitelist_.Mutable(index);
}
inline ::protos::SlotConfig* AllConfig::add_slot_whitelist() {
  // @@protoc_insertion_point(field_add:protos.AllConfig.slot_whitelist)
  return slot_whitelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protos::SlotConfig >*
AllConfig::mutable_slot_whitelist() {
  // @@protoc_insertion_point(field_mutable_list:protos.AllConfig.slot_whitelist)
  return &slot_whitelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::SlotConfig >&
AllConfig::slot_whitelist() const {
  // @@protoc_insertion_point(field_list:protos.AllConfig.slot_whitelist)
  return slot_whitelist_;
}

// optional bool need_output_model = 4;
inline void AllConfig::clear_need_output_model() {
  need_output_model_ = false;
}
inline bool AllConfig::need_output_model() const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.need_output_model)
  return need_output_model_;
}
inline void AllConfig::set_need_output_model(bool value) {
  
  need_output_model_ = value;
  // @@protoc_insertion_point(field_set:protos.AllConfig.need_output_model)
}

// optional string save_model_path = 5;
inline void AllConfig::clear_save_model_path() {
  save_model_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllConfig::save_model_path() const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.save_model_path)
  return save_model_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllConfig::set_save_model_path(const ::std::string& value) {
  
  save_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.AllConfig.save_model_path)
}
inline void AllConfig::set_save_model_path(const char* value) {
  
  save_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.AllConfig.save_model_path)
}
inline void AllConfig::set_save_model_path(const char* value, size_t size) {
  
  save_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.AllConfig.save_model_path)
}
inline ::std::string* AllConfig::mutable_save_model_path() {
  
  // @@protoc_insertion_point(field_mutable:protos.AllConfig.save_model_path)
  return save_model_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllConfig::release_save_model_path() {
  // @@protoc_insertion_point(field_release:protos.AllConfig.save_model_path)
  
  return save_model_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllConfig::set_allocated_save_model_path(::std::string* save_model_path) {
  if (save_model_path != NULL) {
    
  } else {
    
  }
  save_model_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_model_path);
  // @@protoc_insertion_point(field_set_allocated:protos.AllConfig.save_model_path)
}

// optional string save_inc_model_path = 6;
inline void AllConfig::clear_save_inc_model_path() {
  save_inc_model_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllConfig::save_inc_model_path() const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.save_inc_model_path)
  return save_inc_model_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllConfig::set_save_inc_model_path(const ::std::string& value) {
  
  save_inc_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.AllConfig.save_inc_model_path)
}
inline void AllConfig::set_save_inc_model_path(const char* value) {
  
  save_inc_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.AllConfig.save_inc_model_path)
}
inline void AllConfig::set_save_inc_model_path(const char* value, size_t size) {
  
  save_inc_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.AllConfig.save_inc_model_path)
}
inline ::std::string* AllConfig::mutable_save_inc_model_path() {
  
  // @@protoc_insertion_point(field_mutable:protos.AllConfig.save_inc_model_path)
  return save_inc_model_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllConfig::release_save_inc_model_path() {
  // @@protoc_insertion_point(field_release:protos.AllConfig.save_inc_model_path)
  
  return save_inc_model_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllConfig::set_allocated_save_inc_model_path(::std::string* save_inc_model_path) {
  if (save_inc_model_path != NULL) {
    
  } else {
    
  }
  save_inc_model_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_inc_model_path);
  // @@protoc_insertion_point(field_set_allocated:protos.AllConfig.save_inc_model_path)
}

// optional string load_model_path = 7;
inline void AllConfig::clear_load_model_path() {
  load_model_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllConfig::load_model_path() const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.load_model_path)
  return load_model_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllConfig::set_load_model_path(const ::std::string& value) {
  
  load_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.AllConfig.load_model_path)
}
inline void AllConfig::set_load_model_path(const char* value) {
  
  load_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.AllConfig.load_model_path)
}
inline void AllConfig::set_load_model_path(const char* value, size_t size) {
  
  load_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.AllConfig.load_model_path)
}
inline ::std::string* AllConfig::mutable_load_model_path() {
  
  // @@protoc_insertion_point(field_mutable:protos.AllConfig.load_model_path)
  return load_model_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllConfig::release_load_model_path() {
  // @@protoc_insertion_point(field_release:protos.AllConfig.load_model_path)
  
  return load_model_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllConfig::set_allocated_load_model_path(::std::string* load_model_path) {
  if (load_model_path != NULL) {
    
  } else {
    
  }
  load_model_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), load_model_path);
  // @@protoc_insertion_point(field_set_allocated:protos.AllConfig.load_model_path)
}

// optional string load_inc_model_path = 8;
inline void AllConfig::clear_load_inc_model_path() {
  load_inc_model_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllConfig::load_inc_model_path() const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.load_inc_model_path)
  return load_inc_model_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllConfig::set_load_inc_model_path(const ::std::string& value) {
  
  load_inc_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.AllConfig.load_inc_model_path)
}
inline void AllConfig::set_load_inc_model_path(const char* value) {
  
  load_inc_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.AllConfig.load_inc_model_path)
}
inline void AllConfig::set_load_inc_model_path(const char* value, size_t size) {
  
  load_inc_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.AllConfig.load_inc_model_path)
}
inline ::std::string* AllConfig::mutable_load_inc_model_path() {
  
  // @@protoc_insertion_point(field_mutable:protos.AllConfig.load_inc_model_path)
  return load_inc_model_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllConfig::release_load_inc_model_path() {
  // @@protoc_insertion_point(field_release:protos.AllConfig.load_inc_model_path)
  
  return load_inc_model_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllConfig::set_allocated_load_inc_model_path(::std::string* load_inc_model_path) {
  if (load_inc_model_path != NULL) {
    
  } else {
    
  }
  load_inc_model_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), load_inc_model_path);
  // @@protoc_insertion_point(field_set_allocated:protos.AllConfig.load_inc_model_path)
}

// repeated string train_path_list = 9;
inline int AllConfig::train_path_list_size() const {
  return train_path_list_.size();
}
inline void AllConfig::clear_train_path_list() {
  train_path_list_.Clear();
}
inline const ::std::string& AllConfig::train_path_list(int index) const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.train_path_list)
  return train_path_list_.Get(index);
}
inline ::std::string* AllConfig::mutable_train_path_list(int index) {
  // @@protoc_insertion_point(field_mutable:protos.AllConfig.train_path_list)
  return train_path_list_.Mutable(index);
}
inline void AllConfig::set_train_path_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protos.AllConfig.train_path_list)
  train_path_list_.Mutable(index)->assign(value);
}
inline void AllConfig::set_train_path_list(int index, const char* value) {
  train_path_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protos.AllConfig.train_path_list)
}
inline void AllConfig::set_train_path_list(int index, const char* value, size_t size) {
  train_path_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protos.AllConfig.train_path_list)
}
inline ::std::string* AllConfig::add_train_path_list() {
  // @@protoc_insertion_point(field_add_mutable:protos.AllConfig.train_path_list)
  return train_path_list_.Add();
}
inline void AllConfig::add_train_path_list(const ::std::string& value) {
  train_path_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protos.AllConfig.train_path_list)
}
inline void AllConfig::add_train_path_list(const char* value) {
  train_path_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protos.AllConfig.train_path_list)
}
inline void AllConfig::add_train_path_list(const char* value, size_t size) {
  train_path_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protos.AllConfig.train_path_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AllConfig::train_path_list() const {
  // @@protoc_insertion_point(field_list:protos.AllConfig.train_path_list)
  return train_path_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AllConfig::mutable_train_path_list() {
  // @@protoc_insertion_point(field_mutable_list:protos.AllConfig.train_path_list)
  return &train_path_list_;
}

// repeated string test_path_list = 10;
inline int AllConfig::test_path_list_size() const {
  return test_path_list_.size();
}
inline void AllConfig::clear_test_path_list() {
  test_path_list_.Clear();
}
inline const ::std::string& AllConfig::test_path_list(int index) const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.test_path_list)
  return test_path_list_.Get(index);
}
inline ::std::string* AllConfig::mutable_test_path_list(int index) {
  // @@protoc_insertion_point(field_mutable:protos.AllConfig.test_path_list)
  return test_path_list_.Mutable(index);
}
inline void AllConfig::set_test_path_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protos.AllConfig.test_path_list)
  test_path_list_.Mutable(index)->assign(value);
}
inline void AllConfig::set_test_path_list(int index, const char* value) {
  test_path_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protos.AllConfig.test_path_list)
}
inline void AllConfig::set_test_path_list(int index, const char* value, size_t size) {
  test_path_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protos.AllConfig.test_path_list)
}
inline ::std::string* AllConfig::add_test_path_list() {
  // @@protoc_insertion_point(field_add_mutable:protos.AllConfig.test_path_list)
  return test_path_list_.Add();
}
inline void AllConfig::add_test_path_list(const ::std::string& value) {
  test_path_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protos.AllConfig.test_path_list)
}
inline void AllConfig::add_test_path_list(const char* value) {
  test_path_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protos.AllConfig.test_path_list)
}
inline void AllConfig::add_test_path_list(const char* value, size_t size) {
  test_path_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protos.AllConfig.test_path_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AllConfig::test_path_list() const {
  // @@protoc_insertion_point(field_list:protos.AllConfig.test_path_list)
  return test_path_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AllConfig::mutable_test_path_list() {
  // @@protoc_insertion_point(field_mutable_list:protos.AllConfig.test_path_list)
  return &test_path_list_;
}

// optional uint32 filter_count = 11;
inline void AllConfig::clear_filter_count() {
  filter_count_ = 0u;
}
inline ::google::protobuf::uint32 AllConfig::filter_count() const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.filter_count)
  return filter_count_;
}
inline void AllConfig::set_filter_count(::google::protobuf::uint32 value) {
  
  filter_count_ = value;
  // @@protoc_insertion_point(field_set:protos.AllConfig.filter_count)
}

// optional uint32 delay_step = 12;
inline void AllConfig::clear_delay_step() {
  delay_step_ = 0u;
}
inline ::google::protobuf::uint32 AllConfig::delay_step() const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.delay_step)
  return delay_step_;
}
inline void AllConfig::set_delay_step(::google::protobuf::uint32 value) {
  
  delay_step_ = value;
  // @@protoc_insertion_point(field_set:protos.AllConfig.delay_step)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protos::VectorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protos::VectorType>() {
  return ::protos::VectorType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2eproto__INCLUDED
