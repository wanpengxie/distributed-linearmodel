// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto;
namespace protos {
class AllConfig;
struct AllConfigDefaultTypeInternal;
extern AllConfigDefaultTypeInternal _AllConfig_default_instance_;
class FeatureConfig;
struct FeatureConfigDefaultTypeInternal;
extern FeatureConfigDefaultTypeInternal _FeatureConfig_default_instance_;
class OptimConfig;
struct OptimConfigDefaultTypeInternal;
extern OptimConfigDefaultTypeInternal _OptimConfig_default_instance_;
}  // namespace protos
PROTOBUF_NAMESPACE_OPEN
template<> ::protos::AllConfig* Arena::CreateMaybeMessage<::protos::AllConfig>(Arena*);
template<> ::protos::FeatureConfig* Arena::CreateMaybeMessage<::protos::FeatureConfig>(Arena*);
template<> ::protos::OptimConfig* Arena::CreateMaybeMessage<::protos::OptimConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protos {

enum VectorType : int {
  BIAS = 0,
  LEFT = 1,
  RIGHT = 2,
  VectorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VectorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VectorType_IsValid(int value);
constexpr VectorType VectorType_MIN = BIAS;
constexpr VectorType VectorType_MAX = RIGHT;
constexpr int VectorType_ARRAYSIZE = VectorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorType_descriptor();
template<typename T>
inline const std::string& VectorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VectorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VectorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VectorType_descriptor(), enum_t_value);
}
inline bool VectorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VectorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VectorType>(
    VectorType_descriptor(), name, value);
}
// ===================================================================

class OptimConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.OptimConfig) */ {
 public:
  inline OptimConfig() : OptimConfig(nullptr) {}
  ~OptimConfig() override;
  explicit PROTOBUF_CONSTEXPR OptimConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptimConfig(const OptimConfig& from);
  OptimConfig(OptimConfig&& from) noexcept
    : OptimConfig() {
    *this = ::std::move(from);
  }

  inline OptimConfig& operator=(const OptimConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimConfig& operator=(OptimConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptimConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptimConfig* internal_default_instance() {
    return reinterpret_cast<const OptimConfig*>(
               &_OptimConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OptimConfig& a, OptimConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptimConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptimConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptimConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptimConfig& from) {
    OptimConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptimConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.OptimConfig";
  }
  protected:
  explicit OptimConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kL1FieldNumber = 1,
    kL2FieldNumber = 2,
    kAlphaFieldNumber = 3,
    kBetaFieldNumber = 4,
    kEmbAlphaFieldNumber = 5,
    kEmbBetaFieldNumber = 6,
    kEmbL1FieldNumber = 7,
    kEmbL2FieldNumber = 8,
    kEmbSizeFieldNumber = 9,
  };
  // float l1 = 1;
  void clear_l1();
  float l1() const;
  void set_l1(float value);
  private:
  float _internal_l1() const;
  void _internal_set_l1(float value);
  public:

  // float l2 = 2;
  void clear_l2();
  float l2() const;
  void set_l2(float value);
  private:
  float _internal_l2() const;
  void _internal_set_l2(float value);
  public:

  // float alpha = 3;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float beta = 4;
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // float emb_alpha = 5;
  void clear_emb_alpha();
  float emb_alpha() const;
  void set_emb_alpha(float value);
  private:
  float _internal_emb_alpha() const;
  void _internal_set_emb_alpha(float value);
  public:

  // float emb_beta = 6;
  void clear_emb_beta();
  float emb_beta() const;
  void set_emb_beta(float value);
  private:
  float _internal_emb_beta() const;
  void _internal_set_emb_beta(float value);
  public:

  // float emb_l1 = 7;
  void clear_emb_l1();
  float emb_l1() const;
  void set_emb_l1(float value);
  private:
  float _internal_emb_l1() const;
  void _internal_set_emb_l1(float value);
  public:

  // float emb_l2 = 8;
  void clear_emb_l2();
  float emb_l2() const;
  void set_emb_l2(float value);
  private:
  float _internal_emb_l2() const;
  void _internal_set_emb_l2(float value);
  public:

  // uint32 emb_size = 9;
  void clear_emb_size();
  uint32_t emb_size() const;
  void set_emb_size(uint32_t value);
  private:
  uint32_t _internal_emb_size() const;
  void _internal_set_emb_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protos.OptimConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float l1_;
    float l2_;
    float alpha_;
    float beta_;
    float emb_alpha_;
    float emb_beta_;
    float emb_l1_;
    float emb_l2_;
    uint32_t emb_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class FeatureConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.FeatureConfig) */ {
 public:
  inline FeatureConfig() : FeatureConfig(nullptr) {}
  ~FeatureConfig() override;
  explicit PROTOBUF_CONSTEXPR FeatureConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeatureConfig(const FeatureConfig& from);
  FeatureConfig(FeatureConfig&& from) noexcept
    : FeatureConfig() {
    *this = ::std::move(from);
  }

  inline FeatureConfig& operator=(const FeatureConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureConfig& operator=(FeatureConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeatureConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeatureConfig* internal_default_instance() {
    return reinterpret_cast<const FeatureConfig*>(
               &_FeatureConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeatureConfig& a, FeatureConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeatureConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeatureConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeatureConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeatureConfig& from) {
    FeatureConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.FeatureConfig";
  }
  protected:
  explicit FeatureConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSlotIdFieldNumber = 1,
    kVecTypeFieldNumber = 3,
    kCrossFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 slot_id = 1;
  void clear_slot_id();
  uint64_t slot_id() const;
  void set_slot_id(uint64_t value);
  private:
  uint64_t _internal_slot_id() const;
  void _internal_set_slot_id(uint64_t value);
  public:

  // .protos.VectorType vec_type = 3;
  void clear_vec_type();
  ::protos::VectorType vec_type() const;
  void set_vec_type(::protos::VectorType value);
  private:
  ::protos::VectorType _internal_vec_type() const;
  void _internal_set_vec_type(::protos::VectorType value);
  public:

  // int32 cross = 4;
  void clear_cross();
  int32_t cross() const;
  void set_cross(int32_t value);
  private:
  int32_t _internal_cross() const;
  void _internal_set_cross(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protos.FeatureConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t slot_id_;
    int vec_type_;
    int32_t cross_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class AllConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.AllConfig) */ {
 public:
  inline AllConfig() : AllConfig(nullptr) {}
  ~AllConfig() override;
  explicit PROTOBUF_CONSTEXPR AllConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllConfig(const AllConfig& from);
  AllConfig(AllConfig&& from) noexcept
    : AllConfig() {
    *this = ::std::move(from);
  }

  inline AllConfig& operator=(const AllConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllConfig& operator=(AllConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllConfig* internal_default_instance() {
    return reinterpret_cast<const AllConfig*>(
               &_AllConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AllConfig& a, AllConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AllConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AllConfig& from) {
    AllConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.AllConfig";
  }
  protected:
  explicit AllConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureListFieldNumber = 2,
    kTrainListFieldNumber = 5,
    kPredictListFieldNumber = 6,
    kSavePathFieldNumber = 7,
    kLoadPathFieldNumber = 8,
    kOptimConfigFieldNumber = 1,
    kIsFeatureSignedFieldNumber = 3,
    kGroupSparseFieldNumber = 4,
  };
  // repeated .protos.FeatureConfig feature_list = 2;
  int feature_list_size() const;
  private:
  int _internal_feature_list_size() const;
  public:
  void clear_feature_list();
  ::protos::FeatureConfig* mutable_feature_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FeatureConfig >*
      mutable_feature_list();
  private:
  const ::protos::FeatureConfig& _internal_feature_list(int index) const;
  ::protos::FeatureConfig* _internal_add_feature_list();
  public:
  const ::protos::FeatureConfig& feature_list(int index) const;
  ::protos::FeatureConfig* add_feature_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FeatureConfig >&
      feature_list() const;

  // repeated string train_list = 5;
  int train_list_size() const;
  private:
  int _internal_train_list_size() const;
  public:
  void clear_train_list();
  const std::string& train_list(int index) const;
  std::string* mutable_train_list(int index);
  void set_train_list(int index, const std::string& value);
  void set_train_list(int index, std::string&& value);
  void set_train_list(int index, const char* value);
  void set_train_list(int index, const char* value, size_t size);
  std::string* add_train_list();
  void add_train_list(const std::string& value);
  void add_train_list(std::string&& value);
  void add_train_list(const char* value);
  void add_train_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& train_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_train_list();
  private:
  const std::string& _internal_train_list(int index) const;
  std::string* _internal_add_train_list();
  public:

  // repeated string predict_list = 6;
  int predict_list_size() const;
  private:
  int _internal_predict_list_size() const;
  public:
  void clear_predict_list();
  const std::string& predict_list(int index) const;
  std::string* mutable_predict_list(int index);
  void set_predict_list(int index, const std::string& value);
  void set_predict_list(int index, std::string&& value);
  void set_predict_list(int index, const char* value);
  void set_predict_list(int index, const char* value, size_t size);
  std::string* add_predict_list();
  void add_predict_list(const std::string& value);
  void add_predict_list(std::string&& value);
  void add_predict_list(const char* value);
  void add_predict_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& predict_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_predict_list();
  private:
  const std::string& _internal_predict_list(int index) const;
  std::string* _internal_add_predict_list();
  public:

  // string save_path = 7;
  void clear_save_path();
  const std::string& save_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_save_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_save_path();
  PROTOBUF_NODISCARD std::string* release_save_path();
  void set_allocated_save_path(std::string* save_path);
  private:
  const std::string& _internal_save_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_save_path(const std::string& value);
  std::string* _internal_mutable_save_path();
  public:

  // string load_path = 8;
  void clear_load_path();
  const std::string& load_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_load_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_load_path();
  PROTOBUF_NODISCARD std::string* release_load_path();
  void set_allocated_load_path(std::string* load_path);
  private:
  const std::string& _internal_load_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_load_path(const std::string& value);
  std::string* _internal_mutable_load_path();
  public:

  // .protos.OptimConfig optim_config = 1;
  bool has_optim_config() const;
  private:
  bool _internal_has_optim_config() const;
  public:
  void clear_optim_config();
  const ::protos::OptimConfig& optim_config() const;
  PROTOBUF_NODISCARD ::protos::OptimConfig* release_optim_config();
  ::protos::OptimConfig* mutable_optim_config();
  void set_allocated_optim_config(::protos::OptimConfig* optim_config);
  private:
  const ::protos::OptimConfig& _internal_optim_config() const;
  ::protos::OptimConfig* _internal_mutable_optim_config();
  public:
  void unsafe_arena_set_allocated_optim_config(
      ::protos::OptimConfig* optim_config);
  ::protos::OptimConfig* unsafe_arena_release_optim_config();

  // bool is_feature_signed = 3;
  void clear_is_feature_signed();
  bool is_feature_signed() const;
  void set_is_feature_signed(bool value);
  private:
  bool _internal_is_feature_signed() const;
  void _internal_set_is_feature_signed(bool value);
  public:

  // bool group_sparse = 4;
  void clear_group_sparse();
  bool group_sparse() const;
  void set_group_sparse(bool value);
  private:
  bool _internal_group_sparse() const;
  void _internal_set_group_sparse(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protos.AllConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FeatureConfig > feature_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> train_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> predict_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_path_;
    ::protos::OptimConfig* optim_config_;
    bool is_feature_signed_;
    bool group_sparse_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OptimConfig

// float l1 = 1;
inline void OptimConfig::clear_l1() {
  _impl_.l1_ = 0;
}
inline float OptimConfig::_internal_l1() const {
  return _impl_.l1_;
}
inline float OptimConfig::l1() const {
  // @@protoc_insertion_point(field_get:protos.OptimConfig.l1)
  return _internal_l1();
}
inline void OptimConfig::_internal_set_l1(float value) {
  
  _impl_.l1_ = value;
}
inline void OptimConfig::set_l1(float value) {
  _internal_set_l1(value);
  // @@protoc_insertion_point(field_set:protos.OptimConfig.l1)
}

// float l2 = 2;
inline void OptimConfig::clear_l2() {
  _impl_.l2_ = 0;
}
inline float OptimConfig::_internal_l2() const {
  return _impl_.l2_;
}
inline float OptimConfig::l2() const {
  // @@protoc_insertion_point(field_get:protos.OptimConfig.l2)
  return _internal_l2();
}
inline void OptimConfig::_internal_set_l2(float value) {
  
  _impl_.l2_ = value;
}
inline void OptimConfig::set_l2(float value) {
  _internal_set_l2(value);
  // @@protoc_insertion_point(field_set:protos.OptimConfig.l2)
}

// float alpha = 3;
inline void OptimConfig::clear_alpha() {
  _impl_.alpha_ = 0;
}
inline float OptimConfig::_internal_alpha() const {
  return _impl_.alpha_;
}
inline float OptimConfig::alpha() const {
  // @@protoc_insertion_point(field_get:protos.OptimConfig.alpha)
  return _internal_alpha();
}
inline void OptimConfig::_internal_set_alpha(float value) {
  
  _impl_.alpha_ = value;
}
inline void OptimConfig::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:protos.OptimConfig.alpha)
}

// float beta = 4;
inline void OptimConfig::clear_beta() {
  _impl_.beta_ = 0;
}
inline float OptimConfig::_internal_beta() const {
  return _impl_.beta_;
}
inline float OptimConfig::beta() const {
  // @@protoc_insertion_point(field_get:protos.OptimConfig.beta)
  return _internal_beta();
}
inline void OptimConfig::_internal_set_beta(float value) {
  
  _impl_.beta_ = value;
}
inline void OptimConfig::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:protos.OptimConfig.beta)
}

// float emb_alpha = 5;
inline void OptimConfig::clear_emb_alpha() {
  _impl_.emb_alpha_ = 0;
}
inline float OptimConfig::_internal_emb_alpha() const {
  return _impl_.emb_alpha_;
}
inline float OptimConfig::emb_alpha() const {
  // @@protoc_insertion_point(field_get:protos.OptimConfig.emb_alpha)
  return _internal_emb_alpha();
}
inline void OptimConfig::_internal_set_emb_alpha(float value) {
  
  _impl_.emb_alpha_ = value;
}
inline void OptimConfig::set_emb_alpha(float value) {
  _internal_set_emb_alpha(value);
  // @@protoc_insertion_point(field_set:protos.OptimConfig.emb_alpha)
}

// float emb_beta = 6;
inline void OptimConfig::clear_emb_beta() {
  _impl_.emb_beta_ = 0;
}
inline float OptimConfig::_internal_emb_beta() const {
  return _impl_.emb_beta_;
}
inline float OptimConfig::emb_beta() const {
  // @@protoc_insertion_point(field_get:protos.OptimConfig.emb_beta)
  return _internal_emb_beta();
}
inline void OptimConfig::_internal_set_emb_beta(float value) {
  
  _impl_.emb_beta_ = value;
}
inline void OptimConfig::set_emb_beta(float value) {
  _internal_set_emb_beta(value);
  // @@protoc_insertion_point(field_set:protos.OptimConfig.emb_beta)
}

// float emb_l1 = 7;
inline void OptimConfig::clear_emb_l1() {
  _impl_.emb_l1_ = 0;
}
inline float OptimConfig::_internal_emb_l1() const {
  return _impl_.emb_l1_;
}
inline float OptimConfig::emb_l1() const {
  // @@protoc_insertion_point(field_get:protos.OptimConfig.emb_l1)
  return _internal_emb_l1();
}
inline void OptimConfig::_internal_set_emb_l1(float value) {
  
  _impl_.emb_l1_ = value;
}
inline void OptimConfig::set_emb_l1(float value) {
  _internal_set_emb_l1(value);
  // @@protoc_insertion_point(field_set:protos.OptimConfig.emb_l1)
}

// float emb_l2 = 8;
inline void OptimConfig::clear_emb_l2() {
  _impl_.emb_l2_ = 0;
}
inline float OptimConfig::_internal_emb_l2() const {
  return _impl_.emb_l2_;
}
inline float OptimConfig::emb_l2() const {
  // @@protoc_insertion_point(field_get:protos.OptimConfig.emb_l2)
  return _internal_emb_l2();
}
inline void OptimConfig::_internal_set_emb_l2(float value) {
  
  _impl_.emb_l2_ = value;
}
inline void OptimConfig::set_emb_l2(float value) {
  _internal_set_emb_l2(value);
  // @@protoc_insertion_point(field_set:protos.OptimConfig.emb_l2)
}

// uint32 emb_size = 9;
inline void OptimConfig::clear_emb_size() {
  _impl_.emb_size_ = 0u;
}
inline uint32_t OptimConfig::_internal_emb_size() const {
  return _impl_.emb_size_;
}
inline uint32_t OptimConfig::emb_size() const {
  // @@protoc_insertion_point(field_get:protos.OptimConfig.emb_size)
  return _internal_emb_size();
}
inline void OptimConfig::_internal_set_emb_size(uint32_t value) {
  
  _impl_.emb_size_ = value;
}
inline void OptimConfig::set_emb_size(uint32_t value) {
  _internal_set_emb_size(value);
  // @@protoc_insertion_point(field_set:protos.OptimConfig.emb_size)
}

// -------------------------------------------------------------------

// FeatureConfig

// uint64 slot_id = 1;
inline void FeatureConfig::clear_slot_id() {
  _impl_.slot_id_ = uint64_t{0u};
}
inline uint64_t FeatureConfig::_internal_slot_id() const {
  return _impl_.slot_id_;
}
inline uint64_t FeatureConfig::slot_id() const {
  // @@protoc_insertion_point(field_get:protos.FeatureConfig.slot_id)
  return _internal_slot_id();
}
inline void FeatureConfig::_internal_set_slot_id(uint64_t value) {
  
  _impl_.slot_id_ = value;
}
inline void FeatureConfig::set_slot_id(uint64_t value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:protos.FeatureConfig.slot_id)
}

// string name = 2;
inline void FeatureConfig::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FeatureConfig::name() const {
  // @@protoc_insertion_point(field_get:protos.FeatureConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeatureConfig::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protos.FeatureConfig.name)
}
inline std::string* FeatureConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protos.FeatureConfig.name)
  return _s;
}
inline const std::string& FeatureConfig::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FeatureConfig::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FeatureConfig::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FeatureConfig::release_name() {
  // @@protoc_insertion_point(field_release:protos.FeatureConfig.name)
  return _impl_.name_.Release();
}
inline void FeatureConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.FeatureConfig.name)
}

// .protos.VectorType vec_type = 3;
inline void FeatureConfig::clear_vec_type() {
  _impl_.vec_type_ = 0;
}
inline ::protos::VectorType FeatureConfig::_internal_vec_type() const {
  return static_cast< ::protos::VectorType >(_impl_.vec_type_);
}
inline ::protos::VectorType FeatureConfig::vec_type() const {
  // @@protoc_insertion_point(field_get:protos.FeatureConfig.vec_type)
  return _internal_vec_type();
}
inline void FeatureConfig::_internal_set_vec_type(::protos::VectorType value) {
  
  _impl_.vec_type_ = value;
}
inline void FeatureConfig::set_vec_type(::protos::VectorType value) {
  _internal_set_vec_type(value);
  // @@protoc_insertion_point(field_set:protos.FeatureConfig.vec_type)
}

// int32 cross = 4;
inline void FeatureConfig::clear_cross() {
  _impl_.cross_ = 0;
}
inline int32_t FeatureConfig::_internal_cross() const {
  return _impl_.cross_;
}
inline int32_t FeatureConfig::cross() const {
  // @@protoc_insertion_point(field_get:protos.FeatureConfig.cross)
  return _internal_cross();
}
inline void FeatureConfig::_internal_set_cross(int32_t value) {
  
  _impl_.cross_ = value;
}
inline void FeatureConfig::set_cross(int32_t value) {
  _internal_set_cross(value);
  // @@protoc_insertion_point(field_set:protos.FeatureConfig.cross)
}

// -------------------------------------------------------------------

// AllConfig

// .protos.OptimConfig optim_config = 1;
inline bool AllConfig::_internal_has_optim_config() const {
  return this != internal_default_instance() && _impl_.optim_config_ != nullptr;
}
inline bool AllConfig::has_optim_config() const {
  return _internal_has_optim_config();
}
inline void AllConfig::clear_optim_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.optim_config_ != nullptr) {
    delete _impl_.optim_config_;
  }
  _impl_.optim_config_ = nullptr;
}
inline const ::protos::OptimConfig& AllConfig::_internal_optim_config() const {
  const ::protos::OptimConfig* p = _impl_.optim_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::protos::OptimConfig&>(
      ::protos::_OptimConfig_default_instance_);
}
inline const ::protos::OptimConfig& AllConfig::optim_config() const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.optim_config)
  return _internal_optim_config();
}
inline void AllConfig::unsafe_arena_set_allocated_optim_config(
    ::protos::OptimConfig* optim_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optim_config_);
  }
  _impl_.optim_config_ = optim_config;
  if (optim_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.AllConfig.optim_config)
}
inline ::protos::OptimConfig* AllConfig::release_optim_config() {
  
  ::protos::OptimConfig* temp = _impl_.optim_config_;
  _impl_.optim_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protos::OptimConfig* AllConfig::unsafe_arena_release_optim_config() {
  // @@protoc_insertion_point(field_release:protos.AllConfig.optim_config)
  
  ::protos::OptimConfig* temp = _impl_.optim_config_;
  _impl_.optim_config_ = nullptr;
  return temp;
}
inline ::protos::OptimConfig* AllConfig::_internal_mutable_optim_config() {
  
  if (_impl_.optim_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::OptimConfig>(GetArenaForAllocation());
    _impl_.optim_config_ = p;
  }
  return _impl_.optim_config_;
}
inline ::protos::OptimConfig* AllConfig::mutable_optim_config() {
  ::protos::OptimConfig* _msg = _internal_mutable_optim_config();
  // @@protoc_insertion_point(field_mutable:protos.AllConfig.optim_config)
  return _msg;
}
inline void AllConfig::set_allocated_optim_config(::protos::OptimConfig* optim_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.optim_config_;
  }
  if (optim_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optim_config);
    if (message_arena != submessage_arena) {
      optim_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optim_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optim_config_ = optim_config;
  // @@protoc_insertion_point(field_set_allocated:protos.AllConfig.optim_config)
}

// repeated .protos.FeatureConfig feature_list = 2;
inline int AllConfig::_internal_feature_list_size() const {
  return _impl_.feature_list_.size();
}
inline int AllConfig::feature_list_size() const {
  return _internal_feature_list_size();
}
inline void AllConfig::clear_feature_list() {
  _impl_.feature_list_.Clear();
}
inline ::protos::FeatureConfig* AllConfig::mutable_feature_list(int index) {
  // @@protoc_insertion_point(field_mutable:protos.AllConfig.feature_list)
  return _impl_.feature_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FeatureConfig >*
AllConfig::mutable_feature_list() {
  // @@protoc_insertion_point(field_mutable_list:protos.AllConfig.feature_list)
  return &_impl_.feature_list_;
}
inline const ::protos::FeatureConfig& AllConfig::_internal_feature_list(int index) const {
  return _impl_.feature_list_.Get(index);
}
inline const ::protos::FeatureConfig& AllConfig::feature_list(int index) const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.feature_list)
  return _internal_feature_list(index);
}
inline ::protos::FeatureConfig* AllConfig::_internal_add_feature_list() {
  return _impl_.feature_list_.Add();
}
inline ::protos::FeatureConfig* AllConfig::add_feature_list() {
  ::protos::FeatureConfig* _add = _internal_add_feature_list();
  // @@protoc_insertion_point(field_add:protos.AllConfig.feature_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FeatureConfig >&
AllConfig::feature_list() const {
  // @@protoc_insertion_point(field_list:protos.AllConfig.feature_list)
  return _impl_.feature_list_;
}

// bool is_feature_signed = 3;
inline void AllConfig::clear_is_feature_signed() {
  _impl_.is_feature_signed_ = false;
}
inline bool AllConfig::_internal_is_feature_signed() const {
  return _impl_.is_feature_signed_;
}
inline bool AllConfig::is_feature_signed() const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.is_feature_signed)
  return _internal_is_feature_signed();
}
inline void AllConfig::_internal_set_is_feature_signed(bool value) {
  
  _impl_.is_feature_signed_ = value;
}
inline void AllConfig::set_is_feature_signed(bool value) {
  _internal_set_is_feature_signed(value);
  // @@protoc_insertion_point(field_set:protos.AllConfig.is_feature_signed)
}

// bool group_sparse = 4;
inline void AllConfig::clear_group_sparse() {
  _impl_.group_sparse_ = false;
}
inline bool AllConfig::_internal_group_sparse() const {
  return _impl_.group_sparse_;
}
inline bool AllConfig::group_sparse() const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.group_sparse)
  return _internal_group_sparse();
}
inline void AllConfig::_internal_set_group_sparse(bool value) {
  
  _impl_.group_sparse_ = value;
}
inline void AllConfig::set_group_sparse(bool value) {
  _internal_set_group_sparse(value);
  // @@protoc_insertion_point(field_set:protos.AllConfig.group_sparse)
}

// repeated string train_list = 5;
inline int AllConfig::_internal_train_list_size() const {
  return _impl_.train_list_.size();
}
inline int AllConfig::train_list_size() const {
  return _internal_train_list_size();
}
inline void AllConfig::clear_train_list() {
  _impl_.train_list_.Clear();
}
inline std::string* AllConfig::add_train_list() {
  std::string* _s = _internal_add_train_list();
  // @@protoc_insertion_point(field_add_mutable:protos.AllConfig.train_list)
  return _s;
}
inline const std::string& AllConfig::_internal_train_list(int index) const {
  return _impl_.train_list_.Get(index);
}
inline const std::string& AllConfig::train_list(int index) const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.train_list)
  return _internal_train_list(index);
}
inline std::string* AllConfig::mutable_train_list(int index) {
  // @@protoc_insertion_point(field_mutable:protos.AllConfig.train_list)
  return _impl_.train_list_.Mutable(index);
}
inline void AllConfig::set_train_list(int index, const std::string& value) {
  _impl_.train_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protos.AllConfig.train_list)
}
inline void AllConfig::set_train_list(int index, std::string&& value) {
  _impl_.train_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protos.AllConfig.train_list)
}
inline void AllConfig::set_train_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.train_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protos.AllConfig.train_list)
}
inline void AllConfig::set_train_list(int index, const char* value, size_t size) {
  _impl_.train_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protos.AllConfig.train_list)
}
inline std::string* AllConfig::_internal_add_train_list() {
  return _impl_.train_list_.Add();
}
inline void AllConfig::add_train_list(const std::string& value) {
  _impl_.train_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protos.AllConfig.train_list)
}
inline void AllConfig::add_train_list(std::string&& value) {
  _impl_.train_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protos.AllConfig.train_list)
}
inline void AllConfig::add_train_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.train_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protos.AllConfig.train_list)
}
inline void AllConfig::add_train_list(const char* value, size_t size) {
  _impl_.train_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protos.AllConfig.train_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AllConfig::train_list() const {
  // @@protoc_insertion_point(field_list:protos.AllConfig.train_list)
  return _impl_.train_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AllConfig::mutable_train_list() {
  // @@protoc_insertion_point(field_mutable_list:protos.AllConfig.train_list)
  return &_impl_.train_list_;
}

// repeated string predict_list = 6;
inline int AllConfig::_internal_predict_list_size() const {
  return _impl_.predict_list_.size();
}
inline int AllConfig::predict_list_size() const {
  return _internal_predict_list_size();
}
inline void AllConfig::clear_predict_list() {
  _impl_.predict_list_.Clear();
}
inline std::string* AllConfig::add_predict_list() {
  std::string* _s = _internal_add_predict_list();
  // @@protoc_insertion_point(field_add_mutable:protos.AllConfig.predict_list)
  return _s;
}
inline const std::string& AllConfig::_internal_predict_list(int index) const {
  return _impl_.predict_list_.Get(index);
}
inline const std::string& AllConfig::predict_list(int index) const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.predict_list)
  return _internal_predict_list(index);
}
inline std::string* AllConfig::mutable_predict_list(int index) {
  // @@protoc_insertion_point(field_mutable:protos.AllConfig.predict_list)
  return _impl_.predict_list_.Mutable(index);
}
inline void AllConfig::set_predict_list(int index, const std::string& value) {
  _impl_.predict_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protos.AllConfig.predict_list)
}
inline void AllConfig::set_predict_list(int index, std::string&& value) {
  _impl_.predict_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protos.AllConfig.predict_list)
}
inline void AllConfig::set_predict_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.predict_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protos.AllConfig.predict_list)
}
inline void AllConfig::set_predict_list(int index, const char* value, size_t size) {
  _impl_.predict_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protos.AllConfig.predict_list)
}
inline std::string* AllConfig::_internal_add_predict_list() {
  return _impl_.predict_list_.Add();
}
inline void AllConfig::add_predict_list(const std::string& value) {
  _impl_.predict_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protos.AllConfig.predict_list)
}
inline void AllConfig::add_predict_list(std::string&& value) {
  _impl_.predict_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protos.AllConfig.predict_list)
}
inline void AllConfig::add_predict_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.predict_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protos.AllConfig.predict_list)
}
inline void AllConfig::add_predict_list(const char* value, size_t size) {
  _impl_.predict_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protos.AllConfig.predict_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AllConfig::predict_list() const {
  // @@protoc_insertion_point(field_list:protos.AllConfig.predict_list)
  return _impl_.predict_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AllConfig::mutable_predict_list() {
  // @@protoc_insertion_point(field_mutable_list:protos.AllConfig.predict_list)
  return &_impl_.predict_list_;
}

// string save_path = 7;
inline void AllConfig::clear_save_path() {
  _impl_.save_path_.ClearToEmpty();
}
inline const std::string& AllConfig::save_path() const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.save_path)
  return _internal_save_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllConfig::set_save_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.save_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protos.AllConfig.save_path)
}
inline std::string* AllConfig::mutable_save_path() {
  std::string* _s = _internal_mutable_save_path();
  // @@protoc_insertion_point(field_mutable:protos.AllConfig.save_path)
  return _s;
}
inline const std::string& AllConfig::_internal_save_path() const {
  return _impl_.save_path_.Get();
}
inline void AllConfig::_internal_set_save_path(const std::string& value) {
  
  _impl_.save_path_.Set(value, GetArenaForAllocation());
}
inline std::string* AllConfig::_internal_mutable_save_path() {
  
  return _impl_.save_path_.Mutable(GetArenaForAllocation());
}
inline std::string* AllConfig::release_save_path() {
  // @@protoc_insertion_point(field_release:protos.AllConfig.save_path)
  return _impl_.save_path_.Release();
}
inline void AllConfig::set_allocated_save_path(std::string* save_path) {
  if (save_path != nullptr) {
    
  } else {
    
  }
  _impl_.save_path_.SetAllocated(save_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.save_path_.IsDefault()) {
    _impl_.save_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.AllConfig.save_path)
}

// string load_path = 8;
inline void AllConfig::clear_load_path() {
  _impl_.load_path_.ClearToEmpty();
}
inline const std::string& AllConfig::load_path() const {
  // @@protoc_insertion_point(field_get:protos.AllConfig.load_path)
  return _internal_load_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllConfig::set_load_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.load_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protos.AllConfig.load_path)
}
inline std::string* AllConfig::mutable_load_path() {
  std::string* _s = _internal_mutable_load_path();
  // @@protoc_insertion_point(field_mutable:protos.AllConfig.load_path)
  return _s;
}
inline const std::string& AllConfig::_internal_load_path() const {
  return _impl_.load_path_.Get();
}
inline void AllConfig::_internal_set_load_path(const std::string& value) {
  
  _impl_.load_path_.Set(value, GetArenaForAllocation());
}
inline std::string* AllConfig::_internal_mutable_load_path() {
  
  return _impl_.load_path_.Mutable(GetArenaForAllocation());
}
inline std::string* AllConfig::release_load_path() {
  // @@protoc_insertion_point(field_release:protos.AllConfig.load_path)
  return _impl_.load_path_.Release();
}
inline void AllConfig::set_allocated_load_path(std::string* load_path) {
  if (load_path != nullptr) {
    
  } else {
    
  }
  _impl_.load_path_.SetAllocated(load_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.load_path_.IsDefault()) {
    _impl_.load_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.AllConfig.load_path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protos::VectorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protos::VectorType>() {
  return ::protos::VectorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2eproto
