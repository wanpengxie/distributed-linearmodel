// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protos {
PROTOBUF_CONSTEXPR OptimConfig::OptimConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.l1_)*/0
  , /*decltype(_impl_.l2_)*/0
  , /*decltype(_impl_.alpha_)*/0
  , /*decltype(_impl_.beta_)*/0
  , /*decltype(_impl_.emb_alpha_)*/0
  , /*decltype(_impl_.emb_beta_)*/0
  , /*decltype(_impl_.emb_l1_)*/0
  , /*decltype(_impl_.emb_l2_)*/0
  , /*decltype(_impl_.emb_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptimConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptimConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptimConfigDefaultTypeInternal() {}
  union {
    OptimConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptimConfigDefaultTypeInternal _OptimConfig_default_instance_;
PROTOBUF_CONSTEXPR FeatureConfig::FeatureConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.slot_id_)*/uint64_t{0u}
  , /*decltype(_impl_.vec_type_)*/0
  , /*decltype(_impl_.cross_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeatureConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureConfigDefaultTypeInternal() {}
  union {
    FeatureConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureConfigDefaultTypeInternal _FeatureConfig_default_instance_;
PROTOBUF_CONSTEXPR AllConfig::AllConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feature_list_)*/{}
  , /*decltype(_impl_.train_list_)*/{}
  , /*decltype(_impl_.predict_list_)*/{}
  , /*decltype(_impl_.save_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.load_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optim_config_)*/nullptr
  , /*decltype(_impl_.is_feature_signed_)*/false
  , /*decltype(_impl_.group_sparse_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllConfigDefaultTypeInternal() {}
  union {
    AllConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllConfigDefaultTypeInternal _AllConfig_default_instance_;
}  // namespace protos
static ::_pb::Metadata file_level_metadata_config_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_config_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_config_2eproto = nullptr;

const uint32_t TableStruct_config_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::OptimConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protos::OptimConfig, _impl_.l1_),
  PROTOBUF_FIELD_OFFSET(::protos::OptimConfig, _impl_.l2_),
  PROTOBUF_FIELD_OFFSET(::protos::OptimConfig, _impl_.alpha_),
  PROTOBUF_FIELD_OFFSET(::protos::OptimConfig, _impl_.beta_),
  PROTOBUF_FIELD_OFFSET(::protos::OptimConfig, _impl_.emb_alpha_),
  PROTOBUF_FIELD_OFFSET(::protos::OptimConfig, _impl_.emb_beta_),
  PROTOBUF_FIELD_OFFSET(::protos::OptimConfig, _impl_.emb_l1_),
  PROTOBUF_FIELD_OFFSET(::protos::OptimConfig, _impl_.emb_l2_),
  PROTOBUF_FIELD_OFFSET(::protos::OptimConfig, _impl_.emb_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::FeatureConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protos::FeatureConfig, _impl_.slot_id_),
  PROTOBUF_FIELD_OFFSET(::protos::FeatureConfig, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::protos::FeatureConfig, _impl_.vec_type_),
  PROTOBUF_FIELD_OFFSET(::protos::FeatureConfig, _impl_.cross_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::AllConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protos::AllConfig, _impl_.optim_config_),
  PROTOBUF_FIELD_OFFSET(::protos::AllConfig, _impl_.feature_list_),
  PROTOBUF_FIELD_OFFSET(::protos::AllConfig, _impl_.is_feature_signed_),
  PROTOBUF_FIELD_OFFSET(::protos::AllConfig, _impl_.group_sparse_),
  PROTOBUF_FIELD_OFFSET(::protos::AllConfig, _impl_.train_list_),
  PROTOBUF_FIELD_OFFSET(::protos::AllConfig, _impl_.predict_list_),
  PROTOBUF_FIELD_OFFSET(::protos::AllConfig, _impl_.save_path_),
  PROTOBUF_FIELD_OFFSET(::protos::AllConfig, _impl_.load_path_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protos::OptimConfig)},
  { 15, -1, -1, sizeof(::protos::FeatureConfig)},
  { 25, -1, -1, sizeof(::protos::AllConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protos::_OptimConfig_default_instance_._instance,
  &::protos::_FeatureConfig_default_instance_._instance,
  &::protos::_AllConfig_default_instance_._instance,
};

const char descriptor_table_protodef_config_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014config.proto\022\006protos\"\231\001\n\013OptimConfig\022\n"
  "\n\002l1\030\001 \001(\002\022\n\n\002l2\030\002 \001(\002\022\r\n\005alpha\030\003 \001(\002\022\014\n"
  "\004beta\030\004 \001(\002\022\021\n\temb_alpha\030\005 \001(\002\022\020\n\010emb_be"
  "ta\030\006 \001(\002\022\016\n\006emb_l1\030\007 \001(\002\022\016\n\006emb_l2\030\010 \001(\002"
  "\022\020\n\010emb_size\030\t \001(\r\"c\n\rFeatureConfig\022\017\n\007s"
  "lot_id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022$\n\010vec_type\030\003"
  " \001(\0162\022.protos.VectorType\022\r\n\005cross\030\004 \001(\005\""
  "\344\001\n\tAllConfig\022)\n\014optim_config\030\001 \001(\0132\023.pr"
  "otos.OptimConfig\022+\n\014feature_list\030\002 \003(\0132\025"
  ".protos.FeatureConfig\022\031\n\021is_feature_sign"
  "ed\030\003 \001(\010\022\024\n\014group_sparse\030\004 \001(\010\022\022\n\ntrain_"
  "list\030\005 \003(\t\022\024\n\014predict_list\030\006 \003(\t\022\021\n\tsave"
  "_path\030\007 \001(\t\022\021\n\tload_path\030\010 \001(\t*+\n\nVector"
  "Type\022\010\n\004BIAS\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002b\006pro"
  "to3"
  ;
static ::_pbi::once_flag descriptor_table_config_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_config_2eproto = {
    false, false, 563, descriptor_table_protodef_config_2eproto,
    "config.proto",
    &descriptor_table_config_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_config_2eproto::offsets,
    file_level_metadata_config_2eproto, file_level_enum_descriptors_config_2eproto,
    file_level_service_descriptors_config_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_config_2eproto_getter() {
  return &descriptor_table_config_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_config_2eproto(&descriptor_table_config_2eproto);
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_2eproto);
  return file_level_enum_descriptors_config_2eproto[0];
}
bool VectorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class OptimConfig::_Internal {
 public:
};

OptimConfig::OptimConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protos.OptimConfig)
}
OptimConfig::OptimConfig(const OptimConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptimConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.l1_){}
    , decltype(_impl_.l2_){}
    , decltype(_impl_.alpha_){}
    , decltype(_impl_.beta_){}
    , decltype(_impl_.emb_alpha_){}
    , decltype(_impl_.emb_beta_){}
    , decltype(_impl_.emb_l1_){}
    , decltype(_impl_.emb_l2_){}
    , decltype(_impl_.emb_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.l1_, &from._impl_.l1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.emb_size_) -
    reinterpret_cast<char*>(&_impl_.l1_)) + sizeof(_impl_.emb_size_));
  // @@protoc_insertion_point(copy_constructor:protos.OptimConfig)
}

inline void OptimConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.l1_){0}
    , decltype(_impl_.l2_){0}
    , decltype(_impl_.alpha_){0}
    , decltype(_impl_.beta_){0}
    , decltype(_impl_.emb_alpha_){0}
    , decltype(_impl_.emb_beta_){0}
    , decltype(_impl_.emb_l1_){0}
    , decltype(_impl_.emb_l2_){0}
    , decltype(_impl_.emb_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OptimConfig::~OptimConfig() {
  // @@protoc_insertion_point(destructor:protos.OptimConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptimConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OptimConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptimConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.OptimConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.l1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.emb_size_) -
      reinterpret_cast<char*>(&_impl_.l1_)) + sizeof(_impl_.emb_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptimConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float l1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.l1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float l2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.l2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float alpha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float beta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float emb_alpha = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.emb_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float emb_beta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.emb_beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float emb_l1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.emb_l1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float emb_l2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.emb_l2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 emb_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.emb_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptimConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.OptimConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float l1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_l1 = this->_internal_l1();
  uint32_t raw_l1;
  memcpy(&raw_l1, &tmp_l1, sizeof(tmp_l1));
  if (raw_l1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_l1(), target);
  }

  // float l2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_l2 = this->_internal_l2();
  uint32_t raw_l2;
  memcpy(&raw_l2, &tmp_l2, sizeof(tmp_l2));
  if (raw_l2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_l2(), target);
  }

  // float alpha = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_alpha = this->_internal_alpha();
  uint32_t raw_alpha;
  memcpy(&raw_alpha, &tmp_alpha, sizeof(tmp_alpha));
  if (raw_alpha != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_alpha(), target);
  }

  // float beta = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_beta = this->_internal_beta();
  uint32_t raw_beta;
  memcpy(&raw_beta, &tmp_beta, sizeof(tmp_beta));
  if (raw_beta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_beta(), target);
  }

  // float emb_alpha = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_emb_alpha = this->_internal_emb_alpha();
  uint32_t raw_emb_alpha;
  memcpy(&raw_emb_alpha, &tmp_emb_alpha, sizeof(tmp_emb_alpha));
  if (raw_emb_alpha != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_emb_alpha(), target);
  }

  // float emb_beta = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_emb_beta = this->_internal_emb_beta();
  uint32_t raw_emb_beta;
  memcpy(&raw_emb_beta, &tmp_emb_beta, sizeof(tmp_emb_beta));
  if (raw_emb_beta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_emb_beta(), target);
  }

  // float emb_l1 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_emb_l1 = this->_internal_emb_l1();
  uint32_t raw_emb_l1;
  memcpy(&raw_emb_l1, &tmp_emb_l1, sizeof(tmp_emb_l1));
  if (raw_emb_l1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_emb_l1(), target);
  }

  // float emb_l2 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_emb_l2 = this->_internal_emb_l2();
  uint32_t raw_emb_l2;
  memcpy(&raw_emb_l2, &tmp_emb_l2, sizeof(tmp_emb_l2));
  if (raw_emb_l2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_emb_l2(), target);
  }

  // uint32 emb_size = 9;
  if (this->_internal_emb_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_emb_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.OptimConfig)
  return target;
}

size_t OptimConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.OptimConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float l1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_l1 = this->_internal_l1();
  uint32_t raw_l1;
  memcpy(&raw_l1, &tmp_l1, sizeof(tmp_l1));
  if (raw_l1 != 0) {
    total_size += 1 + 4;
  }

  // float l2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_l2 = this->_internal_l2();
  uint32_t raw_l2;
  memcpy(&raw_l2, &tmp_l2, sizeof(tmp_l2));
  if (raw_l2 != 0) {
    total_size += 1 + 4;
  }

  // float alpha = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_alpha = this->_internal_alpha();
  uint32_t raw_alpha;
  memcpy(&raw_alpha, &tmp_alpha, sizeof(tmp_alpha));
  if (raw_alpha != 0) {
    total_size += 1 + 4;
  }

  // float beta = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_beta = this->_internal_beta();
  uint32_t raw_beta;
  memcpy(&raw_beta, &tmp_beta, sizeof(tmp_beta));
  if (raw_beta != 0) {
    total_size += 1 + 4;
  }

  // float emb_alpha = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_emb_alpha = this->_internal_emb_alpha();
  uint32_t raw_emb_alpha;
  memcpy(&raw_emb_alpha, &tmp_emb_alpha, sizeof(tmp_emb_alpha));
  if (raw_emb_alpha != 0) {
    total_size += 1 + 4;
  }

  // float emb_beta = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_emb_beta = this->_internal_emb_beta();
  uint32_t raw_emb_beta;
  memcpy(&raw_emb_beta, &tmp_emb_beta, sizeof(tmp_emb_beta));
  if (raw_emb_beta != 0) {
    total_size += 1 + 4;
  }

  // float emb_l1 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_emb_l1 = this->_internal_emb_l1();
  uint32_t raw_emb_l1;
  memcpy(&raw_emb_l1, &tmp_emb_l1, sizeof(tmp_emb_l1));
  if (raw_emb_l1 != 0) {
    total_size += 1 + 4;
  }

  // float emb_l2 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_emb_l2 = this->_internal_emb_l2();
  uint32_t raw_emb_l2;
  memcpy(&raw_emb_l2, &tmp_emb_l2, sizeof(tmp_emb_l2));
  if (raw_emb_l2 != 0) {
    total_size += 1 + 4;
  }

  // uint32 emb_size = 9;
  if (this->_internal_emb_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_emb_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptimConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptimConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptimConfig::GetClassData() const { return &_class_data_; }


void OptimConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptimConfig*>(&to_msg);
  auto& from = static_cast<const OptimConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.OptimConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_l1 = from._internal_l1();
  uint32_t raw_l1;
  memcpy(&raw_l1, &tmp_l1, sizeof(tmp_l1));
  if (raw_l1 != 0) {
    _this->_internal_set_l1(from._internal_l1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_l2 = from._internal_l2();
  uint32_t raw_l2;
  memcpy(&raw_l2, &tmp_l2, sizeof(tmp_l2));
  if (raw_l2 != 0) {
    _this->_internal_set_l2(from._internal_l2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_alpha = from._internal_alpha();
  uint32_t raw_alpha;
  memcpy(&raw_alpha, &tmp_alpha, sizeof(tmp_alpha));
  if (raw_alpha != 0) {
    _this->_internal_set_alpha(from._internal_alpha());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_beta = from._internal_beta();
  uint32_t raw_beta;
  memcpy(&raw_beta, &tmp_beta, sizeof(tmp_beta));
  if (raw_beta != 0) {
    _this->_internal_set_beta(from._internal_beta());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_emb_alpha = from._internal_emb_alpha();
  uint32_t raw_emb_alpha;
  memcpy(&raw_emb_alpha, &tmp_emb_alpha, sizeof(tmp_emb_alpha));
  if (raw_emb_alpha != 0) {
    _this->_internal_set_emb_alpha(from._internal_emb_alpha());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_emb_beta = from._internal_emb_beta();
  uint32_t raw_emb_beta;
  memcpy(&raw_emb_beta, &tmp_emb_beta, sizeof(tmp_emb_beta));
  if (raw_emb_beta != 0) {
    _this->_internal_set_emb_beta(from._internal_emb_beta());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_emb_l1 = from._internal_emb_l1();
  uint32_t raw_emb_l1;
  memcpy(&raw_emb_l1, &tmp_emb_l1, sizeof(tmp_emb_l1));
  if (raw_emb_l1 != 0) {
    _this->_internal_set_emb_l1(from._internal_emb_l1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_emb_l2 = from._internal_emb_l2();
  uint32_t raw_emb_l2;
  memcpy(&raw_emb_l2, &tmp_emb_l2, sizeof(tmp_emb_l2));
  if (raw_emb_l2 != 0) {
    _this->_internal_set_emb_l2(from._internal_emb_l2());
  }
  if (from._internal_emb_size() != 0) {
    _this->_internal_set_emb_size(from._internal_emb_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptimConfig::CopyFrom(const OptimConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.OptimConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimConfig::IsInitialized() const {
  return true;
}

void OptimConfig::InternalSwap(OptimConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptimConfig, _impl_.emb_size_)
      + sizeof(OptimConfig::_impl_.emb_size_)
      - PROTOBUF_FIELD_OFFSET(OptimConfig, _impl_.l1_)>(
          reinterpret_cast<char*>(&_impl_.l1_),
          reinterpret_cast<char*>(&other->_impl_.l1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptimConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[0]);
}

// ===================================================================

class FeatureConfig::_Internal {
 public:
};

FeatureConfig::FeatureConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protos.FeatureConfig)
}
FeatureConfig::FeatureConfig(const FeatureConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeatureConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.slot_id_){}
    , decltype(_impl_.vec_type_){}
    , decltype(_impl_.cross_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.slot_id_, &from._impl_.slot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cross_) -
    reinterpret_cast<char*>(&_impl_.slot_id_)) + sizeof(_impl_.cross_));
  // @@protoc_insertion_point(copy_constructor:protos.FeatureConfig)
}

inline void FeatureConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.slot_id_){uint64_t{0u}}
    , decltype(_impl_.vec_type_){0}
    , decltype(_impl_.cross_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeatureConfig::~FeatureConfig() {
  // @@protoc_insertion_point(destructor:protos.FeatureConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeatureConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void FeatureConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeatureConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.FeatureConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.slot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cross_) -
      reinterpret_cast<char*>(&_impl_.slot_id_)) + sizeof(_impl_.cross_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 slot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protos.FeatureConfig.name"));
        } else
          goto handle_unusual;
        continue;
      // .protos.VectorType vec_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vec_type(static_cast<::protos::VectorType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 cross = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.cross_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeatureConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.FeatureConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 slot_id = 1;
  if (this->_internal_slot_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_slot_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protos.FeatureConfig.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .protos.VectorType vec_type = 3;
  if (this->_internal_vec_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_vec_type(), target);
  }

  // int32 cross = 4;
  if (this->_internal_cross() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_cross(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.FeatureConfig)
  return target;
}

size_t FeatureConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.FeatureConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 slot_id = 1;
  if (this->_internal_slot_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_slot_id());
  }

  // .protos.VectorType vec_type = 3;
  if (this->_internal_vec_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_vec_type());
  }

  // int32 cross = 4;
  if (this->_internal_cross() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cross());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeatureConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeatureConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeatureConfig::GetClassData() const { return &_class_data_; }


void FeatureConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeatureConfig*>(&to_msg);
  auto& from = static_cast<const FeatureConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.FeatureConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_slot_id() != 0) {
    _this->_internal_set_slot_id(from._internal_slot_id());
  }
  if (from._internal_vec_type() != 0) {
    _this->_internal_set_vec_type(from._internal_vec_type());
  }
  if (from._internal_cross() != 0) {
    _this->_internal_set_cross(from._internal_cross());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeatureConfig::CopyFrom(const FeatureConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.FeatureConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureConfig::IsInitialized() const {
  return true;
}

void FeatureConfig::InternalSwap(FeatureConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeatureConfig, _impl_.cross_)
      + sizeof(FeatureConfig::_impl_.cross_)
      - PROTOBUF_FIELD_OFFSET(FeatureConfig, _impl_.slot_id_)>(
          reinterpret_cast<char*>(&_impl_.slot_id_),
          reinterpret_cast<char*>(&other->_impl_.slot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[1]);
}

// ===================================================================

class AllConfig::_Internal {
 public:
  static const ::protos::OptimConfig& optim_config(const AllConfig* msg);
};

const ::protos::OptimConfig&
AllConfig::_Internal::optim_config(const AllConfig* msg) {
  return *msg->_impl_.optim_config_;
}
AllConfig::AllConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protos.AllConfig)
}
AllConfig::AllConfig(const AllConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_list_){from._impl_.feature_list_}
    , decltype(_impl_.train_list_){from._impl_.train_list_}
    , decltype(_impl_.predict_list_){from._impl_.predict_list_}
    , decltype(_impl_.save_path_){}
    , decltype(_impl_.load_path_){}
    , decltype(_impl_.optim_config_){nullptr}
    , decltype(_impl_.is_feature_signed_){}
    , decltype(_impl_.group_sparse_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.save_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.save_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_save_path().empty()) {
    _this->_impl_.save_path_.Set(from._internal_save_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.load_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_load_path().empty()) {
    _this->_impl_.load_path_.Set(from._internal_load_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_optim_config()) {
    _this->_impl_.optim_config_ = new ::protos::OptimConfig(*from._impl_.optim_config_);
  }
  ::memcpy(&_impl_.is_feature_signed_, &from._impl_.is_feature_signed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_sparse_) -
    reinterpret_cast<char*>(&_impl_.is_feature_signed_)) + sizeof(_impl_.group_sparse_));
  // @@protoc_insertion_point(copy_constructor:protos.AllConfig)
}

inline void AllConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_list_){arena}
    , decltype(_impl_.train_list_){arena}
    , decltype(_impl_.predict_list_){arena}
    , decltype(_impl_.save_path_){}
    , decltype(_impl_.load_path_){}
    , decltype(_impl_.optim_config_){nullptr}
    , decltype(_impl_.is_feature_signed_){false}
    , decltype(_impl_.group_sparse_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.save_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.save_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.load_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AllConfig::~AllConfig() {
  // @@protoc_insertion_point(destructor:protos.AllConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feature_list_.~RepeatedPtrField();
  _impl_.train_list_.~RepeatedPtrField();
  _impl_.predict_list_.~RepeatedPtrField();
  _impl_.save_path_.Destroy();
  _impl_.load_path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.optim_config_;
}

void AllConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.AllConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feature_list_.Clear();
  _impl_.train_list_.Clear();
  _impl_.predict_list_.Clear();
  _impl_.save_path_.ClearToEmpty();
  _impl_.load_path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.optim_config_ != nullptr) {
    delete _impl_.optim_config_;
  }
  _impl_.optim_config_ = nullptr;
  ::memset(&_impl_.is_feature_signed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.group_sparse_) -
      reinterpret_cast<char*>(&_impl_.is_feature_signed_)) + sizeof(_impl_.group_sparse_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protos.OptimConfig optim_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_optim_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protos.FeatureConfig feature_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_feature_signed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_feature_signed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool group_sparse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.group_sparse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string train_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_train_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protos.AllConfig.train_list"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string predict_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_predict_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protos.AllConfig.predict_list"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string save_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_save_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protos.AllConfig.save_path"));
        } else
          goto handle_unusual;
        continue;
      // string load_path = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_load_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protos.AllConfig.load_path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.AllConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protos.OptimConfig optim_config = 1;
  if (this->_internal_has_optim_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::optim_config(this),
        _Internal::optim_config(this).GetCachedSize(), target, stream);
  }

  // repeated .protos.FeatureConfig feature_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feature_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_feature_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_feature_signed = 3;
  if (this->_internal_is_feature_signed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_feature_signed(), target);
  }

  // bool group_sparse = 4;
  if (this->_internal_group_sparse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_group_sparse(), target);
  }

  // repeated string train_list = 5;
  for (int i = 0, n = this->_internal_train_list_size(); i < n; i++) {
    const auto& s = this->_internal_train_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protos.AllConfig.train_list");
    target = stream->WriteString(5, s, target);
  }

  // repeated string predict_list = 6;
  for (int i = 0, n = this->_internal_predict_list_size(); i < n; i++) {
    const auto& s = this->_internal_predict_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protos.AllConfig.predict_list");
    target = stream->WriteString(6, s, target);
  }

  // string save_path = 7;
  if (!this->_internal_save_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_save_path().data(), static_cast<int>(this->_internal_save_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protos.AllConfig.save_path");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_save_path(), target);
  }

  // string load_path = 8;
  if (!this->_internal_load_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load_path().data(), static_cast<int>(this->_internal_load_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protos.AllConfig.load_path");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_load_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.AllConfig)
  return target;
}

size_t AllConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.AllConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protos.FeatureConfig feature_list = 2;
  total_size += 1UL * this->_internal_feature_list_size();
  for (const auto& msg : this->_impl_.feature_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string train_list = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.train_list_.size());
  for (int i = 0, n = _impl_.train_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.train_list_.Get(i));
  }

  // repeated string predict_list = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.predict_list_.size());
  for (int i = 0, n = _impl_.predict_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.predict_list_.Get(i));
  }

  // string save_path = 7;
  if (!this->_internal_save_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_save_path());
  }

  // string load_path = 8;
  if (!this->_internal_load_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load_path());
  }

  // .protos.OptimConfig optim_config = 1;
  if (this->_internal_has_optim_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.optim_config_);
  }

  // bool is_feature_signed = 3;
  if (this->_internal_is_feature_signed() != 0) {
    total_size += 1 + 1;
  }

  // bool group_sparse = 4;
  if (this->_internal_group_sparse() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllConfig::GetClassData() const { return &_class_data_; }


void AllConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllConfig*>(&to_msg);
  auto& from = static_cast<const AllConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.AllConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.feature_list_.MergeFrom(from._impl_.feature_list_);
  _this->_impl_.train_list_.MergeFrom(from._impl_.train_list_);
  _this->_impl_.predict_list_.MergeFrom(from._impl_.predict_list_);
  if (!from._internal_save_path().empty()) {
    _this->_internal_set_save_path(from._internal_save_path());
  }
  if (!from._internal_load_path().empty()) {
    _this->_internal_set_load_path(from._internal_load_path());
  }
  if (from._internal_has_optim_config()) {
    _this->_internal_mutable_optim_config()->::protos::OptimConfig::MergeFrom(
        from._internal_optim_config());
  }
  if (from._internal_is_feature_signed() != 0) {
    _this->_internal_set_is_feature_signed(from._internal_is_feature_signed());
  }
  if (from._internal_group_sparse() != 0) {
    _this->_internal_set_group_sparse(from._internal_group_sparse());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllConfig::CopyFrom(const AllConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.AllConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllConfig::IsInitialized() const {
  return true;
}

void AllConfig::InternalSwap(AllConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.feature_list_.InternalSwap(&other->_impl_.feature_list_);
  _impl_.train_list_.InternalSwap(&other->_impl_.train_list_);
  _impl_.predict_list_.InternalSwap(&other->_impl_.predict_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.save_path_, lhs_arena,
      &other->_impl_.save_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.load_path_, lhs_arena,
      &other->_impl_.load_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllConfig, _impl_.group_sparse_)
      + sizeof(AllConfig::_impl_.group_sparse_)
      - PROTOBUF_FIELD_OFFSET(AllConfig, _impl_.optim_config_)>(
          reinterpret_cast<char*>(&_impl_.optim_config_),
          reinterpret_cast<char*>(&other->_impl_.optim_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protos::OptimConfig*
Arena::CreateMaybeMessage< ::protos::OptimConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protos::OptimConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::FeatureConfig*
Arena::CreateMaybeMessage< ::protos::FeatureConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protos::FeatureConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::AllConfig*
Arena::CreateMaybeMessage< ::protos::AllConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protos::AllConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
